@model IndexNoteDto

@{
	ViewData["Title"] = "Notes";
	Model.ThisUrl = "Index";
}

<partial name="_SubMenu" Model="Model.SubMenuNotes" />

<h1>Notes</h1>

<h5>See notes from everyone!</h5>


<br />

<a asp-action="Create" class="btn btn-primary mb-3">Add new</a>

<!-- Delete modal -->
<div class="modal fade" id="toastRemove" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">The following note will be removed:</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="toastRemoveButton">Remove</button>
			</div>

			<input type="hidden" id="idToRemove" />

		</div>
	</div>
</div>

<table class="table">
	<thead>
	<th>User</th>
	<th>Note</th>
	<th>Importance</th>
	<th>Creation Date</th>
	<th>Likes</th>
		@if (Model.UserId != -1)
		{
		<th>Actions</th>
		}
	</thead>

	<tbody>
		@foreach (Note n in Model.Notes)
		{
			<tr id="@n.Id">
				<td id="userName-@n.Id"> @n.User.UserName</td>
				<td id="text-@n.Id"> @n.Text</td>
				<td id="noteImportance-@n.Id"> @n.NoteImportance.Importance</td>
				<td id="creationDate-@n.Id"> @n.CreationDate</td>
				<td id="noteLikes-@n.Id"> @n.Likes.Count</td>

				@if (Model.UserId != -1)
				{
					<td>
						@if (n.UserId == Model.UserId)
						{
							<a id="editBtn-@n.Id" class="btn btn-primary" asp-action="Edit" asp-route-id="@n.Id" asp-route-toShow=@Model.SubMenuNotes.ToString()><i class="bi-pencil-fill"></i></a>
							//<a id="deleteBtn-@n.Id" class="btn btn-danger deleteButton" asp-action="Delete" asp-route-id="@n.Id"><i class="bi-trash-fill"></i></a>
							<a id="deleteBtn-@n.Id" class="btn btn-danger deleteButton"><i class="bi-trash-fill"></i></a>
						}
						else
						{
							if (n.Likes.Find(item => item.UserId == Model.UserId) != null)
							{
								<a id="setLikeBtn-@n.Id" class="btn btn-success likeButton"><i class="bi-hand-thumbs-up-fill"></i></a>
							}
							else
							{
								@* <a id="setLikeBtn-@n.Id" class="btn btn-info likeButton" asp-action="Like" asp-route-id="@n.Id"><i class="bi-hand-thumbs-up-fill"></i></a> *@
								<a id="setLikeBtn-@n.Id" class="btn btn-secondary likeButton"><i class="bi-hand-thumbs-up-fill"></i></a>
							}
						}
					</td>
				}
			</tr>
		}
	</tbody>

</table>

@section Scripts {

	<script>

		function getNoteId(button) {
			//previous implementation
			//return button.closest('tr').find('.id').val(); // Retrieve the note ID from the closest row to the button
			return button.attr("id").split('-')[1];
		}

		$(function () {
			$(".deleteButton").on('click', function (e) {
				e.preventDefault();

				const button = $(this);
				const toast = $("#toastRemove");

				toast.modal('show');

				const id = getNoteId(button);
				toast.find(".modal-body").text($("#text-" + id).text());
				toast.find("#idToRemove").val(id)
			});
		})

		$(function () {
			$("#toastRemoveButton").on('click', function (e) {

				e.preventDefault();

				const toast = $("#toastRemove");
				const noteId = toast.find("#idToRemove").val()

				$.ajax({
					url: '@Url.Action("DeleteNoteFromToast", "Notes")',
					type: 'POST',
					data: { id: noteId },
					success: function (response, status, jqxhr) {
						console.log("Note removed: ", response)
						$('#' + noteId).remove();
					},
					error: function (jqxhr, status, error) {
						console.log("Error removing note: ", error);
					},
					complete: function () {
						toast.modal('hide');
					}
				});
			});
		})


		$(function () {
			$(".likeButton").on('click', function (e) {
				e.preventDefault();

				console.log("pressed")

				const noteId = getNoteId($(this));

				const dataToSend = {
					noteId: noteId,
					userId: @Model.UserId, // Include the user ID directly from the model
				};

				const button = $(this);


				//if it is already liked..
				if (button.attr("class").includes("success")) {
					$.ajax({
						url: '@Url.Action("RemoveLike", "NoteLike")',
						type: 'POST',
						data: {
							noteId: noteId,
							userId: @Model.UserId, // Include the user ID directly from the model
						},
						success: function (response, status, jqxhr) {
							console.log("Note unliked", response)

							const id = "#noteLikes-" + noteId;
							//$(id).text(response.length); //alternative
							$(id).html(response.length);

							button.removeClass("btn-success").addClass("btn-secondary");
						},
						error: function (jqxhr, status, error) {
							console.log("Error removing like: ", error);
						}
					});
				}
				else {
					$.ajax({
						url: '@Url.Action("SetLike", "NoteLike")',
						type: 'POST',
						contentType: 'application/json', // Set the content type to JSON
						data: JSON.stringify(dataToSend),
						success: function (response, status, jqxhr) {
							console.log("Note liked", response)
							const id = "#noteLikes-" + noteId;
							//$(id).text(response.length);
							$(id).html(response.length);

							button.removeClass("btn-secondary").addClass("btn-success");
						},
						error: function (jqxhr, status, error) {
							console.log("Error setting like: ", error);
							console.log("fail :(");
						}
					});
				}
			});
		});

		//NOT WORKING
		/*
		$(function () {

			$(".likeButton").on('click', function (e) {
				e.preventDefault();

				const noteId = getNoteId($(this));

				console.log("getNoteID: ", noteId);
				console.log("json ->", JSON.stringify(noteId))
				console.log("json2 ->", { noteId: noteId })
				$.post(urlSetLike, { noteId: noteId })
					.done(function (response, status, jqxhr) {
						console.log("done!!")
						// this is the "success" callback
					})
					.fail(function (jqxhr, status, error) {
						console.log("fail :(")
						// this is the ""error"" callback
					})
			})
		})
		*/

	</script>
}
